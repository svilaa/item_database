from django.db import models
from django.contrib.auth.models import User
from datetime import date
from django.core.urlresolvers import reverse

def get_default_user():
    return User.objects.get(pk=1)
    
class ItemClass(models.Model):
	"""
	  The items are classified by his type, can be swords, shields,
	  armors, helmets, healing objects, multiplayer objects, etc
	"""
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.TextField(max_length=400)
	user = models.ForeignKey(User, default=get_default_user)
	date = models.DateField(default=date.today)

	def __unicode__(self):
		return self.name

class Item(models.Model):
	"""
	  An item is a object that the player can use, wear or wield
	"""
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.TextField(max_length=400)
	creatures = models.ManyToManyField('Creature', blank=True, through='Drops')
	areas = models.ManyToManyField('Area', blank=True, through='Found')
	typeID = models.ForeignKey(ItemClass)
	user = models.ForeignKey(User, default=get_default_user)
	date = models.DateField(default=date.today)

	def __unicode__(self):
		return self.name

	def get_absolute_url(self):
		return '/items/%i.html' % self.id

	def averageRating(self):
		ratingSum = 0.0
		for review in self.itemreview_set.all():
			ratingSum += review.rating
		reviewCount = self.itemreview_set.count()
		return ratingSum / reviewCount

class Area(models.Model):
	"""
	  An area is the place where items and enemies where found
	"""
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.TextField(max_length=400)
	user = models.ForeignKey(User, default=get_default_user)
	date = models.DateField(default=date.today)

	def __unicode__(self):
		return self.name

	def get_absolute_url(self):
		return '/areas/%i.html' % self.id

class Creature(models.Model):
	"""
	  A creature has a danger level deppends of his aggressiveness, located in one or more
	  areas, and drops souls (the currency of the game). This can be unique for many reasons
	  (a boss, a special enemy, is part of the story, etc)
	"""
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.TextField(max_length=400)
	dangerLevel = models.IntegerField()
	souls = models.PositiveIntegerField()
	unique = models.BooleanField()
	areas = models.ManyToManyField(Area, blank=True, through='Encountered')
	user = models.ForeignKey(User, default=get_default_user)
	date = models.DateField(default=date.today)
	
	def __unicode__(self):
		return self.name

	def get_absolute_url(self):
		return '/creatures/%i.html' % self.id

class Encountered(models.Model):
	"""
	  Associates an area and a creature
	"""
	creatureID = models.ForeignKey(Creature)
	areaID = models.ForeignKey(Area)

	def __unicode__(self):
		return self.creatureID.name + " - " + self.areaID.name

class Drops(models.Model):
	"""
	  Associates an item and a creature with a specific drop rate to obtain the item
	"""
	itemID = models.ForeignKey(Item)
	creatureID = models.ForeignKey(Creature)
	dropRate = models.FloatField()

	def __unicode__(self):
		return self.itemID.name + " - " + self.creatureID.name

class Found(models.Model):
	"""
	  Associates an item and an area
	"""
	itemID = models.ForeignKey(Item)
	areaID = models.ForeignKey(Area)

	def __unicode__(self):
		return self.itemID.name + " - " + self.areaID.name
		
class UserItems(models.Model):
	"""
	  Stores the quantity of the item that has an user
	"""
	userID = models.ForeignKey(User)
	itemID = models.ForeignKey(Item)
	quantity = models.PositiveIntegerField()
	def __unicode__(self):
		return self.userID.username + " - " + self.itemID.name + " - " + str(self.quantity)

class Review(models.Model):
	RATING_CHOICES = ((1,'1'),(2,'2'),(3,'3'),(4,'4'),(5,'5'))
	rating = models.PositiveSmallIntegerField('Ratings (stars)', blank=False, default=3, choices=RATING_CHOICES)
	comment = models.TextField(blank=True, null=True)
	user = models.ForeignKey(User, default=get_default_user)
	date = models.DateField(default=date.today)

	class Meta:
		abstract = True

class ItemReview(Review):
	item = models.ForeignKey(Item)