from django.db import models
from django.contrib.auth.models import User

class ItemClass(models.Model):
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.CharField(max_length=400)
	
	def __unicode__(self):
		return self.name

class Item(models.Model):
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.CharField(max_length=400)
	typeID = models.ForeignKey(ItemClass)

	def __unicode__(self):
		return self.name

class Area(models.Model):
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.CharField(max_length=400)

	def __unicode__(self):
		return self.name

class Creature(models.Model):
	#id automatic generated by Django
	name = models.CharField(max_length=50, unique=True)
	desc = models.CharField(max_length=400)
	dangerLevel = models.IntegerField()
	souls = models.IntegerField()
	unique = models.BooleanField()
	
	def __unicode__(self):
		return self.name

class Drops(models.Model):
	itemID = models.ForeignKey(Item)
	creatureID = models.ForeignKey(Creature)
	dropRate = models.FloatField()

	def __unicode__(self):
		return self.itemID.name + " - " + self.creatureID.name

class Found(models.Model):
	itemID = models.ForeignKey(Item)
	areaID = models.ForeignKey(Area)

	def __unicode__(self):
		return self.itemID.name + " - " + self.areaID.name

class Encountered(models.Model):
	creatureID = models.ForeignKey(Creature)
	areaID = models.ForeignKey(Area)

	def __unicode__(self):
		return self.creatureID.name + " - " + self.areaID.name